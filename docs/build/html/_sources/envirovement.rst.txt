.. DRAW documentation master file, created by
   sphinx-quickstart on Wed Jun  3 15:45:25 2020.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Enviroment
================================

DRAW is dedicated to Linux machines.
Docker installation is the only needed (recommended version 19.03.8). All the instructions to install Dokcer on Linux can be find at the link below:
https://runnable.com/docker/install-docker-on-linux

Presence of popular browser is assumed. Recommended is Google Chrome version 81.0.4044.113.

DRAW processes are runnig in enclosed Docker environment. Communicate with the host by publishing ports (2000 to GUI and 5000 to visualizations) and volumes,
which persist data generated by and used by Docker, these are input, config_files and output directories. Docker is running in interactive mode for User to see processes running inside the container.
To run a process inside Docker container, the image must me builded first.
To build and image execution of following bash script is needed. It executes bash command "build -t draw ."

::

$ ./build.sh



Before running the Docker container input data must be placed in input directory for container to see and access it.

To run the Docker container execution of run_docker.sh is needed. This script binds directories input, config_files and output between Docker and host and publishes ports 2000 and 5000 to host machine.
Thus Flask apps can be accessed from outside container.

::

$ ./run_docker


After starting the container GUI application to fill in the config file opens in browser and can be accessed at the adress below:
http://0.0.0.0:2000/index

After starting the container opens following adress. At this adress visualizations are available after the end of the analysis.
http://0.0.0.0:5000/bkapp

Docker can by stopped from running using Ctrl+Chrome

Adresses used by apps can be already allocated to processes on a Linux machine. If encountering an error "Adress is alredy in use" following command should work. It releases occupied ports.
$ sudo fuser -k Port_Number/tcp

Environment is based on Ubuntu:20.04

Three platfors are installed:
openjdk-8-jre=8u252-b09-1ubuntu1
python3=3.8.2-0ubuntu2 and python3-pip=20.0.2-5ubuntu1
r-base=3.6.3-2

Tools installed::

   bowtie2=2.3.5.1-6build1 \
   fastqc=0.11.9+dfsg-2 \
   hisat2=2.1.0-4 \
   igv=2.4.17+dfsg-1 \
   samtools=1.10-3 \
   stringtie=2.1.1+ds-2 \
   wget=1.20.3-1ubuntu1
   Trimmomatic-0.39

Python requirements::

   bokeh==2.0.2
   colorcet==2.0.2
   Flask==1.1.2
   matplotlib==3.2.1
   numpy==1.18.4
   pandas==1.0.3
   sklearn==0.0


R packages::

   BiocManager
   DESeq2

All installations in Docker can be tested by executing test_installations_in_docker.sh inside Docker container. It requires basic Dokcer knowledge.
First two lines in Dockerfile shiuld be uncommented (setting the workdir to tests and running this script) and commented two lines running analysis (setting workdir to bin and running gui_app.py)
Test performs during build and returns nothing if installation was right, otherwise it returns messeges and informs what is wrong.



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
